package com.kienlongbank.classroomservice.service.impl;


import com.kienlongbank.classroomservice.client.UserServiceClient;
import com.kienlongbank.classroomservice.dto.ClassroomResponse;
import com.kienlongbank.classroomservice.dto.GradeRequest;
import com.kienlongbank.classroomservice.dto.StudentClassroomRequest;
import com.kienlongbank.classroomservice.dto.StudentClassroomResponse;
import com.kienlongbank.classroomservice.exception.ClassroomException;
import com.kienlongbank.classroomservice.model.Classroom;
import com.kienlongbank.classroomservice.model.StudentClassroom;
import com.kienlongbank.classroomservice.repository.ClassroomRepository;
import com.kienlongbank.classroomservice.repository.StudentClassroomRepository;
import com.kienlongbank.classroomservice.service.ClassroomService;
import com.kienlongbank.classroomservice.service.StudentClassroomService;
import org.springframework.transaction.annotation.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Slf4j
public class StudentClassroomServiceImpl implements StudentClassroomService {

    private final StudentClassroomRepository studentClassroomRepository;
    private final ClassroomRepository classroomRepository;
    private final ClassroomService classroomService;
    private final UserServiceClient userServiceClient;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    public StudentClassroomServiceImpl(
            StudentClassroomRepository studentClassroomRepository,
            ClassroomRepository classroomRepository,
            ClassroomService classroomService,
            UserServiceClient userServiceClient) {
        this.studentClassroomRepository = studentClassroomRepository;
        this.classroomRepository = classroomRepository;
        this.classroomService = classroomService;
        this.userServiceClient = userServiceClient;
    }

    @Override
    @Transactional
    @Caching(evict = {
        @CacheEvict(value = "studentsByClassroom", key = "#request.classroomId"),
        @CacheEvict(value = "classroomsByStudent", key = "#request.studentId")
    })
    public StudentClassroomResponse enrollStudentToClassroom(StudentClassroomRequest request) {
        log.info("üìù ENROLL: ƒêƒÉng k√Ω h·ªçc sinh ID {} v√†o l·ªõp h·ªçc ID {} v√† x√≥a cache li√™n quan", 
                request.getStudentId(), request.getClassroomId());
        
        try {
            int capacity = 0;
            // Verify classroom exists
            Classroom classroom = classroomRepository.findById(request.getClassroomId())
                    .orElseThrow(() -> new ClassroomException("Classroom not found with id: " + request.getClassroomId()));
            capacity = classroom.getCapacity();
            // Check if student is already enrolled in the classroom
            if (studentClassroomRepository.existsByStudentIdAndClassroomId(
                    request.getStudentId(), request.getClassroomId())) {
                throw new ClassroomException("Student is already enrolled in this classroom");
            }

            // Create a new enrollment
            if(capacity <= 0 ){throw new ClassroomException("No capacity avaiable !");}
            StudentClassroom studentClassroom = new StudentClassroom();
            studentClassroom.setStudentId(request.getStudentId());
            studentClassroom.setClassroomId(request.getClassroomId());
            studentClassroom.setEnrolledAt(LocalDateTime.now());

            StudentClassroom savedEnrollment = studentClassroomRepository.save(studentClassroom);
            //update capacity
            classroom.setCapacity(capacity-1);
            //save classroom
            classroomRepository.save(classroom);
            log.info("üìù ENROLL: ƒêƒÉng k√Ω h·ªçc sinh ID {} v√†o l·ªõp h·ªçc ID {} th√†nh c√¥ng", 
                    request.getStudentId(), request.getClassroomId());
                    
            // Try to get student details from User Service
            UserServiceClient.UserDto studentDetails = null;
            try {
                studentDetails = userServiceClient.getUserById(request.getStudentId());
            } catch (Exception e) {
                // Log the error but continue - the enrollment was successful
                log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc sinh: {}", e.getMessage());
            }

            // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ classroomService ph√≤ng tr∆∞·ªùng h·ª£p cache tr·∫£ v·ªÅ LinkedHashMap
            ClassroomResponse classroomResponse = safeGetClassroomResponse(request.getClassroomId());
            
            return convertToResponse(savedEnrollment, studentDetails, classroomResponse);
        } catch (Exception e) {
            log.error("L·ªói khi ƒëƒÉng k√Ω h·ªçc sinh ID {} v√†o l·ªõp h·ªçc ID {}: {}", 
                request.getStudentId(), request.getClassroomId(), e.getMessage(), e);
            
            // N·∫øu l·ªói li√™n quan ƒë·∫øn LinkedHashMap, th·ª≠ l·∫°i v·ªõi ph∆∞∆°ng th·ª©c kh√¥ng d√πng cache
            if (e.getMessage() != null && e.getMessage().contains("LinkedHashMap cannot be cast")) {
                log.info("üîÑ RETRY: Th·ª≠ ƒëƒÉng k√Ω l·∫°i kh√¥ng qua cache classroom");
                return enrollStudentToClassroomWithoutCache(request);
            }
            throw e;
        }
    }
    
    // Ph∆∞∆°ng th·ª©c b·ªï sung ƒë·ªÉ ƒëƒÉng k√Ω h·ªçc sinh v√†o l·ªõp h·ªçc kh√¥ng qua cache
    private StudentClassroomResponse enrollStudentToClassroomWithoutCache(StudentClassroomRequest request) {
        try {
            int capacity = 0;
            // Verify classroom exists
            Classroom classroom = classroomRepository.findById(request.getClassroomId())
                    .orElseThrow(() -> new ClassroomException("Classroom not found with id: " + request.getClassroomId()));
            capacity = classroom.getCapacity();
            
            // Check if student is already enrolled
            if (studentClassroomRepository.existsByStudentIdAndClassroomId(
                    request.getStudentId(), request.getClassroomId())) {
                throw new ClassroomException("Student is already enrolled in this classroom");
            }

            // Check capacity
            if (capacity <= 0) {
                throw new ClassroomException("No capacity available!");
            }

            // Create enrollment
            StudentClassroom studentClassroom = new StudentClassroom();
            studentClassroom.setStudentId(request.getStudentId());
            studentClassroom.setClassroomId(request.getClassroomId());
            studentClassroom.setEnrolledAt(LocalDateTime.now());

            // Save enrollment
            StudentClassroom savedEnrollment = studentClassroomRepository.save(studentClassroom);
            
            // Update capacity
            classroom.setCapacity(capacity - 1);
            classroomRepository.save(classroom);
            
            log.info("üìù DIRECT ENROLL: ƒêƒÉng k√Ω h·ªçc sinh ID {} v√†o l·ªõp h·ªçc ID {} th√†nh c√¥ng (kh√¥ng qua cache)", 
                    request.getStudentId(), request.getClassroomId());
            
            // Get student details
            UserServiceClient.UserDto studentDetails = null;
            try {
                studentDetails = userServiceClient.getUserById(request.getStudentId());
            } catch (Exception e) {
                log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc sinh: {}", e.getMessage());
            }
            
            // Convert classroom to response directly
            ClassroomResponse classroomResponse = safeGetClassroomResponse(request.getClassroomId());
            
            return convertToResponse(savedEnrollment, studentDetails, classroomResponse);
        } catch (Exception e) {
            log.error("L·ªói khi ƒëƒÉng k√Ω h·ªçc sinh tr·ª±c ti·∫øp v√†o l·ªõp h·ªçc: {}", e.getMessage(), e);
            throw e;
        }
    }

    @Override
    @Transactional
    @Caching(
        put = {
            @CachePut(value = "studentClassroom", key = "#studentId + '-' + #classroomId")
        },
        evict = {
            @CacheEvict(value = "studentsByClassroom", key = "#classroomId"),
            @CacheEvict(value = "classroomsByStudent", key = "#studentId")
        }
    )
    public StudentClassroomResponse updateStudentGrade(Long studentId, Long classroomId, GradeRequest gradeRequest) {
        log.info("üìä UPDATE GRADE: C·∫≠p nh·∫≠t ƒëi·ªÉm cho h·ªçc sinh ID {} trong l·ªõp h·ªçc ID {} v√† c·∫≠p nh·∫≠t cache", 
                studentId, classroomId);
                
        StudentClassroom enrollment = studentClassroomRepository.findByStudentIdAndClassroomId(studentId, classroomId)
                .orElseThrow(() -> new ClassroomException("Enrollment not found for student " + studentId + 
                        " in classroom " + classroomId));
        
        enrollment.setGrade(gradeRequest.getGrade());
        enrollment.setFeedback(gradeRequest.getFeedback());
        
        StudentClassroom updatedEnrollment = studentClassroomRepository.save(enrollment);
        log.info("üìä UPDATE GRADE: C·∫≠p nh·∫≠t ƒëi·ªÉm cho h·ªçc sinh ID {} trong l·ªõp h·ªçc ID {} th√†nh c√¥ng", studentId, classroomId);
        
        // Fetch related data for the response
        UserServiceClient.UserDto studentDetails = null;
        try {
            studentDetails = userServiceClient.getUserById(studentId);
        } catch (Exception e) {
            log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc sinh: {}", e.getMessage());
        }
        
        ClassroomResponse classroomResponse = safeGetClassroomResponse(classroomId);
        return convertToResponse(updatedEnrollment, studentDetails, classroomResponse);
    }

    @Override
    @Cacheable(value = "studentsByClassroom", key = "#classroomId")
    public List<StudentClassroomResponse> getStudentsByClassroomId(Long classroomId) {
        log.info("üîç DATABASE: L·∫•y danh s√°ch h·ªçc sinh cho l·ªõp h·ªçc ID {} t·ª´ database", classroomId);
        
        try {
            // Verify classroom exists
            if (!classroomRepository.existsById(classroomId)) {
                throw new ClassroomException("Classroom not found with id: " + classroomId);
            }
            
            List<StudentClassroom> enrollments = studentClassroomRepository.findByClassroomId(classroomId);
            ClassroomResponse classroomResponse = safeGetClassroomResponse(classroomId);
            
            List<StudentClassroomResponse> responses = enrollments.stream()
                    .map(enrollment -> {
                        UserServiceClient.UserDto studentDetails = null;
                        try {
                            studentDetails = userServiceClient.getUserById(enrollment.getStudentId());
                        } catch (Exception e) {
                            log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc sinh: {}", e.getMessage());
                        }
                        return convertToResponse(enrollment, studentDetails, classroomResponse);
                    })
                    .collect(Collectors.toList());
                    
            log.info("üîç DATABASE: T√¨m th·∫•y {} h·ªçc sinh cho l·ªõp h·ªçc ID {} trong database", responses.size(), classroomId);
            return responses;
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y danh s√°ch h·ªçc sinh cho l·ªõp h·ªçc ID {}: {}", classroomId, e.getMessage(), e);
            // N·∫øu l·ªói, th·ª≠ l·∫•y tr·ª±c ti·∫øp t·ª´ database, kh√¥ng d√πng cache
            if (e.getMessage() != null && e.getMessage().contains("LinkedHashMap cannot be cast")) {
                log.info("üîÑ RETRY: Th·ª≠ l·∫•y l·∫°i d·ªØ li·ªáu t·ª´ database kh√¥ng qua cache");
                return getStudentsFromDatabaseWithoutCache(classroomId);
            }
            throw e;
        }
    }

    @Override
    @Cacheable(value = "classroomsByStudent", key = "#studentId")
    public List<StudentClassroomResponse> getClassroomsByStudentId(Long studentId) {
        log.info("üîç DATABASE: L·∫•y danh s√°ch l·ªõp h·ªçc cho h·ªçc sinh ID {} t·ª´ database", studentId);

        List<StudentClassroom> enrollments = studentClassroomRepository.findByStudentId(studentId);

        List<StudentClassroomResponse> responses = enrollments.stream()
                .map(enrollment -> {
                    UserServiceClient.UserDto studentDetails = null;
                    try {
                        studentDetails = userServiceClient.getUserById(enrollment.getStudentId());
                    } catch (Exception e) {
                        log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc sinh: {}", e.getMessage());
                    }

                    ClassroomResponse classroomResponse = safeGetClassroomResponse(enrollment.getClassroomId());
                    return convertToResponse(enrollment, studentDetails, classroomResponse);
                })
                        .collect(Collectors.toList());

        log.info("üîç DATABASE: T√¨m th·∫•y {} l·ªõp h·ªçc cho h·ªçc sinh ID {} trong database", responses.size(), studentId);
        return responses;
    }

    @Override
    @Transactional
    @Caching(evict = {
        @CacheEvict(value = "studentClassroom", key = "#studentId + '-' + #classroomId"),
        @CacheEvict(value = "studentsByClassroom", key = "#classroomId"),
        @CacheEvict(value = "classroomsByStudent", key = "#studentId")
    })
    public void unenrollStudent(Long studentId, Long classroomId) {
        log.info("üóëÔ∏è UNENROLL: H·ªßy ƒëƒÉng k√Ω h·ªçc sinh ID {} kh·ªèi l·ªõp h·ªçc ID {} v√† x√≥a kh·ªèi cache", 
                studentId, classroomId);
                
        if (!studentClassroomRepository.existsByStudentIdAndClassroomId(studentId, classroomId)) {
            throw new ClassroomException("Student " + studentId + " is not enrolled in classroom " + classroomId);
        }
        
        studentClassroomRepository.deleteByStudentIdAndClassroomId(studentId, classroomId);
        log.info("üóëÔ∏è UNENROLL: H·ªßy ƒëƒÉng k√Ω h·ªçc sinh ID {} kh·ªèi l·ªõp h·ªçc ID {} th√†nh c√¥ng", 
                studentId, classroomId);
    }
    
    private StudentClassroomResponse convertToResponse(
            StudentClassroom enrollment, 
            UserServiceClient.UserDto studentDetails,
            ClassroomResponse classroomResponse) {
        
        return new StudentClassroomResponse(
                enrollment.getId(),
                enrollment.getStudentId(),
                studentDetails,
                enrollment.getClassroomId(),
                classroomResponse,
                enrollment.getGrade(),
                enrollment.getFeedback(),
                enrollment.getEnrolledAt()
        );
    }

    // Ph∆∞∆°ng th·ª©c b·ªï sung ƒë·ªÉ l·∫•y d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ database m√† kh√¥ng qua cache
    private List<StudentClassroomResponse> getStudentsFromDatabaseWithoutCache(Long classroomId) {
        try {
            // Verify classroom exists
            if (!classroomRepository.existsById(classroomId)) {
                throw new ClassroomException("Classroom not found with id: " + classroomId);
            }
            
            // L·∫•y th√¥ng tin l·ªõp h·ªçc tr·ª±c ti·∫øp t·ª´ repository, kh√¥ng qua service ƒë·ªÉ tr√°nh cache
            Classroom classroom = classroomRepository.findById(classroomId)
                .orElseThrow(() -> new ClassroomException("Classroom not found with id: " + classroomId));
            
            // Convert sang ClassroomResponse th·ªß c√¥ng
            ClassroomResponse classroomResponse = safeGetClassroomResponse(classroomId);
            
            // L·∫•y danh s√°ch h·ªçc sinh
            List<StudentClassroom> enrollments = studentClassroomRepository.findByClassroomId(classroomId);
            
            // Convert sang response
            List<StudentClassroomResponse> responses = enrollments.stream()
                    .map(enrollment -> {
                        UserServiceClient.UserDto studentDetails = null;
                        try {
                            studentDetails = userServiceClient.getUserById(enrollment.getStudentId());
                        } catch (Exception e) {
                            log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc sinh: {}", e.getMessage());
                        }
                        return convertToResponse(enrollment, studentDetails, classroomResponse);
                    })
                    .collect(Collectors.toList());
                    
            log.info("üîç DATABASE DIRECT: T√¨m th·∫•y {} h·ªçc sinh cho l·ªõp h·ªçc ID {} trong database", responses.size(), classroomId);
            return responses;
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y danh s√°ch h·ªçc sinh tr·ª±c ti·∫øp t·ª´ database cho l·ªõp h·ªçc ID {}: {}", classroomId, e.getMessage(), e);
            throw e;
        }
    }
    
    // Ph∆∞∆°ng th·ª©c b·ªï sung ƒë·ªÉ convert Classroom th√†nh ClassroomResponse
    private ClassroomResponse safeGetClassroomResponse(Long classroomId) {
        Object classroomObj = classroomService.getClassroomById(classroomId);
        if (classroomObj instanceof ClassroomResponse) {
            return (ClassroomResponse) classroomObj;
        } else if (classroomObj instanceof java.util.LinkedHashMap) {
            return objectMapper.convertValue(classroomObj, ClassroomResponse.class);
        } else if (classroomObj != null) {
            throw new ClassroomException("Cannot convert classroom object to ClassroomResponse: " + classroomObj.getClass().getName());
        } else {
            throw new ClassroomException("Cannot convert classroom object to ClassroomResponse: null");
        }
    }

    @Override
    public List<StudentClassroomResponse> getAllStudentClassrooms() {
        log.info("üîç DATABASE: L·∫•y t·∫•t c·∫£ enrollments t·ª´ database");
        List<StudentClassroom> enrollments = studentClassroomRepository.findAll();
        return enrollments.stream().map(enrollment -> {
            UserServiceClient.UserDto studentDetails = null;
            try {
                studentDetails = userServiceClient.getUserById(enrollment.getStudentId());
            } catch (Exception e) {
                log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc sinh: {}", e.getMessage());
            }
            ClassroomResponse classroomResponse = null;
            try {
                classroomResponse = safeGetClassroomResponse(enrollment.getClassroomId());
            } catch (Exception e) {
                log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin l·ªõp h·ªçc: {}", e.getMessage());
            }
            return convertToResponse(enrollment, studentDetails, classroomResponse);
        }).collect(Collectors.toList());
    }
} 