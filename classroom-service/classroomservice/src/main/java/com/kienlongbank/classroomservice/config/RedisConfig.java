package com.kienlongbank.classroomservice.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

/**
 * C·∫•u h√¨nh chi ti·∫øt cho Redis v√† theo d√µi logs
 * L∆∞u √Ω: C·∫•u h√¨nh n√†y ch·ªâ t·∫°o RedisTemplate, CacheManager ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong CacheConfig
 */
@Configuration
@ConditionalOnProperty(name = "spring.cache.type", havingValue = "redis")
public class RedisConfig {

    private static final Logger log = LoggerFactory.getLogger(RedisConfig.class);
    
    @Value("${spring.redis.host:localhost}")
    private String redisHost;
    
    @Value("${spring.redis.port:6379}")
    private int redisPort;
    
    @Value("${spring.redis.password:}")
    private String redisPassword;
    
    /**
     * T·∫°o connection factory cho Redis
     */
    @Bean
    public LettuceConnectionFactory redisConnectionFactory() {
        log.info("üîå Kh·ªüi t·∫°o k·∫øt n·ªëi Redis - host: {}, port: {}", redisHost, redisPort);
        
        RedisStandaloneConfiguration config = new RedisStandaloneConfiguration();
        config.setHostName(redisHost);
        config.setPort(redisPort);
        
        if (redisPassword != null && !redisPassword.isEmpty()) {
            config.setPassword(redisPassword);
            log.info("üîë ƒê√£ c·∫•u h√¨nh password cho Redis");
        }
        
        return new LettuceConnectionFactory(config);
    }
    
    /**
     * T·∫°o RedisTemplate ƒë·ªÉ thao t√°c v·ªõi Redis tr·ª±c ti·∫øp (kh√¥ng qua Cache)
     * L∆∞u √Ω: Bean n√†y KH√îNG ·∫£nh h∆∞·ªüng ƒë·∫øn c·∫•u h√¨nh CacheManager trong CacheConfig
     */
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        log.info("üß∞ Kh·ªüi t·∫°o Redis Template");
        
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        
        // C·∫•u h√¨nh serializer
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new JdkSerializationRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(new JdkSerializationRedisSerializer());
        
        template.afterPropertiesSet();
        
        log.info("Redis template ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi key serializer: {} v√† value serializer: {}", 
                template.getKeySerializer().getClass().getSimpleName(),
                template.getValueSerializer().getClass().getSimpleName());
        
        return template;
    }
    
    /**
     * Bean n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi Redis khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
     */
    @Bean
    public Runnable redisConnectionCheck(RedisTemplate<String, Object> redisTemplate) {
        return () -> {
            try {
                Boolean pingResult = redisTemplate.getConnectionFactory().getConnection().ping() != null;
                log.info("üìå Ki·ªÉm tra k·∫øt n·ªëi Redis - Ping th√†nh c√¥ng: {}", pingResult);
            } catch (Exception e) {
                log.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Redis: {}", e.getMessage());
            }
        };
    }
} 